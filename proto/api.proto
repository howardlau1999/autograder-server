syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "model.proto";
option go_package = "autograder-server/pkg/api/proto";

message UploadFileRequest {
  string filename = 1;
}

message UploadFileResponse {
  string upload_id = 1;
}

message UploadChunkRequest {
  string upload_id = 1;
  uint64 offset = 2;
  bytes data = 3;
}

message UploadChunkResponse {
  string upload_id = 1;
}

message LoginRequest {
  string username = 1;
  string password = 2;
  string challenge_token = 3;
  string captcha = 4;
}

message LoginResponse {
  uint64 user_id = 1;
}

message GetCourseListRequest {
}

message GetCourseListResponse {
  message CourseCardInfo {
    string name = 1;
    string short_name = 2;
    CourseRole role = 3;
    uint64 course_id = 4;
  }
  repeated CourseCardInfo courses = 2;
}

message GetAssignmentsInCourseRequest {
  uint64 course_id = 1;
}

message GetAssignmentsInCourseResponse {
  message CourseAssignmentInfo {
    uint64 assignment_id = 1;
    string name = 2;
    google.protobuf.Timestamp release_date = 3;
    google.protobuf.Timestamp due_date = 4;
    bool submitted = 5;
  }
  repeated CourseAssignmentInfo assignments = 1;
}

message GetSubmissionsInAssignmentRequest {
  uint64 assignment_id = 1;
}

message GetSubmissionsInAssignmentResponse {
  message SubmissionInfo {
    uint64 submission_id = 1;
    google.protobuf.Timestamp submitted_at = 2;
    message Submitter {
      uint64 user_id = 1;
      string username = 2;
    }
    repeated Submitter submitters = 3;
    uint64 score = 4;
    uint64 max_score = 5;
    SubmissionStatus status = 6;
  }
  repeated SubmissionInfo submissions = 1;
}

message SubscribeSubmissionsRequest {
  repeated uint64 submission_ids = 1;
}

message SubscribeSubmissionsResponse {
  message StatusUpdate {
    uint64 submission_id = 1;
    uint64 score = 2;
    SubmissionStatus status = 3;
  }
  repeated StatusUpdate updates = 1;
}

message StreamSubmissionLogRequest {
  uint64 submission_id = 1;
}

message GetFileRequest {
  string path = 1;
}

message ChunkResponse {
  string chunk = 1;
}

message CreateManifestRequest {
  uint64 assignment_id = 1;
}

message CreateManifestResponse {
  uint64 manifest_id = 1;
  string token = 2;
}

message InitUploadRequest {
  uint64 manifest_id = 1;
  string filename = 2;
  string token = 3;
  uint64 filesize = 4;
}

message InitUploadResponse {
  string token = 1;
}

message CreateSubmissionRequest {
  uint64 assignment_id = 1;
  uint64 manifest_id = 2;
  repeated uint64 submitters = 3;
  string leaderboard_name = 4;
}

message CreateSubmissionResponse {
  uint64 submission_id = 1;
  repeated string files = 2;
  repeated string submitters = 3;
}

message UploadTokenPayload {
  uint64 user_id = 1;
  uint64 assignment_id = 2;
  uint64 manifest_id = 3;
  string filename = 4;
  uint64 filesize = 5;
}

message UserTokenPayload {
  uint64 user_id = 1;
  string username = 2;
}

message DownloadTokenPayload {
  string real_path = 1;
  string filename = 2;
}

message GetSubmissionReportRequest {
  uint64 submission_id = 1;
}

message GetSubmissionReportResponse {
  SubmissionReport report = 1;
  SubmissionStatus status = 2;
}

message SubscribeSubmissionRequest {
  uint64 submission_id = 1;
}

message SubscribeSubmissionResponse {
  uint64 score = 1;
  uint64 maxScore = 2;
  SubmissionStatus status = 3;
}

message GetAssignmentRequest {
  uint64 assignment_id = 1;
}

message GetAssignmentResponse {
  Assignment assignment = 1;
}

message GetCourseRequest {
  uint64 course_id = 1;
}

message GetCourseResponse {
  Course course = 1;
  CourseRole role = 2;
}

message GetFilesInSubmissionRequest {
  uint64 submission_id = 1;
}

message FileTreeNode {
  string name = 1;
  enum Type {
    Folder = 0;
    File = 1;
  }
  Type node_type = 2;
  repeated FileTreeNode children = 3;
  string path = 4;
}

message GetFilesInSubmissionResponse {
  repeated FileTreeNode roots = 1;
}

message GetLeaderboardRequest {
  uint64 assignment_id = 1;
}

message GetLeaderboardResponse {
  repeated LeaderboardEntry entries = 1;
}

message HasLeaderboardRequest {
  uint64 assignment_id = 1;
}

message HasLeaderboardResponse {
  bool has_leaderboard = 1;
}

message CreateCourseRequest {
  string name = 1;
  string short_name = 2;
  string description = 3;
}

message CreateCourseResponse {
  uint64 course_id = 1;
  Course course = 2;
}

message CreateAssignmentRequest {
  string name = 1;
  uint64 course_id = 2;
  AssignmentType assignment_type = 3;
  google.protobuf.Timestamp release_date = 4;
  google.protobuf.Timestamp due_date = 5;
  google.protobuf.Timestamp late_due_date = 6;
  string description = 7;
  ProgrammingAssignmentConfig programming_config = 8;
}

message CreateAssignmentResponse {
  Assignment assignment = 1;
  uint64 assignment_id = 2;
}

message DeleteFileInManifestRequest {
  uint64 manifest_id = 1;
  string filename = 2;
}

message DeleteFileInManifestResponse {

}

message InitDownloadRequest {
  uint64 submission_id = 1;
  string filename = 2;
}

enum DownloadFileType {
  Binary = 0;
  Text = 1;
  Image = 2;
  PDF = 3;
}

message InitDownloadResponse {
  string token = 1;
  DownloadFileType file_type = 2;
  string filename = 3;
}

message GetCourseMembersRequest {
  uint64 course_id = 1;
}

message GetCourseMembersResponse {
  message MemberInfo {
    uint64 user_id = 1;
    string username = 2;
    string email = 3;
    string nickname = 4;
    CourseRole role = 5;
  }
  repeated MemberInfo members = 1;
}

message RemoveCourseMembersRequest {
  uint64 course_id = 1;
  repeated uint64 user_ids = 2;
}

message RemoveCourseMembersResponse {
  repeated uint64 removed = 1;
}

message AddCourseMembersRequest {
  uint64 course_id = 1;
  message MemberToAdd {
    string email = 1;
    string name = 2;
    CourseRole role = 3;
  }
  repeated MemberToAdd members = 2;
}

message AddCourseMembersResponse {
  repeated CourseMember added = 1;
}

message UpdateCourseMemberRequest {
  uint64 course_id = 1;
  CourseMember member = 2;
}

message UpdateCourseMemberResponse {

}

message UpdateCourseRequest {
  uint64 course_id = 1;
  Course course = 2;
}

message UpdateCourseResponse {

}

message UpdateAssignmentRequest {
  uint64 assignment_id = 1;
  Assignment assignment = 2;
}

message UpdateAssignmentResponse {

}

message RequestPasswordResetRequest {
  string email = 1;
  string captcha = 2;
}

message RequestPasswordResetResponse {

}

message ResetPasswordRequest {
  string email = 1;
  string code = 2;
  string password = 3;
}

message ResetPasswordResponse {

}

message RequestSignUpTokenRequest {
  string email = 1;
  string username = 2;
  string captcha = 3;
}

message RequestSignUpTokenResponse {

}

message SignUpRequest {
  string email = 1;
  string username = 2;
  string code = 3;
  string password = 4;
}

message SignUpResponse {
  uint64 user_id = 1;
}

message CanWriteCourseRequest {
  uint64 course_id = 1;
}

message CanWriteCourseResponse {
  bool write_permission = 1;
}

service AutograderService {
   rpc Login(LoginRequest) returns (LoginResponse);
   rpc GetCourseList(GetCourseListRequest) returns (GetCourseListResponse);
   rpc GetAssignmentsInCourse(GetAssignmentsInCourseRequest) returns (GetAssignmentsInCourseResponse);
   rpc GetSubmissionsInAssignment(GetSubmissionsInAssignmentRequest) returns (GetSubmissionsInAssignmentResponse);
   rpc SubscribeSubmission(SubscribeSubmissionRequest) returns (stream SubscribeSubmissionResponse);
   rpc CreateManifest(CreateManifestRequest) returns (CreateManifestResponse);
   rpc CreateSubmission(CreateSubmissionRequest) returns (CreateSubmissionResponse);
   rpc InitUpload(InitUploadRequest) returns (InitUploadResponse);
   rpc GetSubmissionReport(GetSubmissionReportRequest) returns (GetSubmissionReportResponse);
   rpc GetAssignment(GetAssignmentRequest) returns (GetAssignmentResponse);
   rpc GetCourse(GetCourseRequest) returns (GetCourseResponse);
   rpc CreateCourse(CreateCourseRequest) returns (CreateCourseResponse);
   rpc GetFilesInSubmission(GetFilesInSubmissionRequest) returns (GetFilesInSubmissionResponse);
   rpc GetLeaderboard(GetLeaderboardRequest) returns (GetLeaderboardResponse);
   rpc HasLeaderboard(HasLeaderboardRequest) returns (HasLeaderboardResponse);
   rpc CreateAssignment(CreateAssignmentRequest) returns (CreateAssignmentResponse);
   rpc DeleteFileInManifest(DeleteFileInManifestRequest) returns (DeleteFileInManifestResponse);
   rpc InitDownload(InitDownloadRequest) returns (InitDownloadResponse);
   rpc GetCourseMembers(GetCourseMembersRequest) returns (GetCourseMembersResponse);
   rpc AddCourseMembers(AddCourseMembersRequest) returns (AddCourseMembersResponse);
   rpc RemoveCourseMembers(RemoveCourseMembersRequest) returns (RemoveCourseMembersResponse);
   rpc UpdateCourseMember(UpdateCourseMemberRequest) returns (UpdateCourseMemberResponse);
   rpc UpdateCourse(UpdateCourseRequest) returns (UpdateCourseResponse);
   rpc UpdateAssignment(UpdateAssignmentRequest) returns (UpdateAssignmentResponse);
   rpc RequestPasswordReset(RequestPasswordResetRequest) returns (RequestPasswordResetResponse);
   rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
   rpc RequestSignUpToken(RequestSignUpTokenRequest) returns (RequestSignUpTokenResponse);
   rpc SignUp(SignUpRequest) returns (SignUpResponse);
   rpc CanWriteCourse(CanWriteCourseRequest) returns (CanWriteCourseResponse);
}
