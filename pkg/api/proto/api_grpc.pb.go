// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutograderServiceClient is the client API for AutograderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutograderServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetCourseList(ctx context.Context, in *GetCourseListRequest, opts ...grpc.CallOption) (*GetCourseListResponse, error)
	GetAssignmentsInCourse(ctx context.Context, in *GetAssignmentsInCourseRequest, opts ...grpc.CallOption) (*GetAssignmentsInCourseResponse, error)
	GetSubmissionsInAssignment(ctx context.Context, in *GetSubmissionsInAssignmentRequest, opts ...grpc.CallOption) (*GetSubmissionsInAssignmentResponse, error)
	SubscribeSubmission(ctx context.Context, in *SubscribeSubmissionRequest, opts ...grpc.CallOption) (AutograderService_SubscribeSubmissionClient, error)
	CreateManifest(ctx context.Context, in *CreateManifestRequest, opts ...grpc.CallOption) (*CreateManifestResponse, error)
	CreateSubmission(ctx context.Context, in *CreateSubmissionRequest, opts ...grpc.CallOption) (*CreateSubmissionResponse, error)
	InitUpload(ctx context.Context, in *InitUploadRequest, opts ...grpc.CallOption) (*InitUploadResponse, error)
	GetSubmissionReport(ctx context.Context, in *GetSubmissionReportRequest, opts ...grpc.CallOption) (*GetSubmissionReportResponse, error)
	GetAssignment(ctx context.Context, in *GetAssignmentRequest, opts ...grpc.CallOption) (*GetAssignmentResponse, error)
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error)
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	GetFilesInSubmission(ctx context.Context, in *GetFilesInSubmissionRequest, opts ...grpc.CallOption) (*GetFilesInSubmissionResponse, error)
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	HasLeaderboard(ctx context.Context, in *HasLeaderboardRequest, opts ...grpc.CallOption) (*HasLeaderboardResponse, error)
	CreateAssignment(ctx context.Context, in *CreateAssignmentRequest, opts ...grpc.CallOption) (*CreateAssignmentResponse, error)
	DeleteFileInManifest(ctx context.Context, in *DeleteFileInManifestRequest, opts ...grpc.CallOption) (*DeleteFileInManifestResponse, error)
	InitDownload(ctx context.Context, in *InitDownloadRequest, opts ...grpc.CallOption) (*InitDownloadResponse, error)
	GetCourseMembers(ctx context.Context, in *GetCourseMembersRequest, opts ...grpc.CallOption) (*GetCourseMembersResponse, error)
	AddCourseMembers(ctx context.Context, in *AddCourseMembersRequest, opts ...grpc.CallOption) (*AddCourseMembersResponse, error)
	RemoveCourseMembers(ctx context.Context, in *RemoveCourseMembersRequest, opts ...grpc.CallOption) (*RemoveCourseMembersResponse, error)
	UpdateCourseMember(ctx context.Context, in *UpdateCourseMemberRequest, opts ...grpc.CallOption) (*UpdateCourseMemberResponse, error)
	UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error)
	UpdateAssignment(ctx context.Context, in *UpdateAssignmentRequest, opts ...grpc.CallOption) (*UpdateAssignmentResponse, error)
	RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*RequestPasswordResetResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	RequestSignUpToken(ctx context.Context, in *RequestSignUpTokenRequest, opts ...grpc.CallOption) (*RequestSignUpTokenResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
}

type autograderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutograderServiceClient(cc grpc.ClientConnInterface) AutograderServiceClient {
	return &autograderServiceClient{cc}
}

func (c *autograderServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCourseList(ctx context.Context, in *GetCourseListRequest, opts ...grpc.CallOption) (*GetCourseListResponse, error) {
	out := new(GetCourseListResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetCourseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetAssignmentsInCourse(ctx context.Context, in *GetAssignmentsInCourseRequest, opts ...grpc.CallOption) (*GetAssignmentsInCourseResponse, error) {
	out := new(GetAssignmentsInCourseResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetAssignmentsInCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetSubmissionsInAssignment(ctx context.Context, in *GetSubmissionsInAssignmentRequest, opts ...grpc.CallOption) (*GetSubmissionsInAssignmentResponse, error) {
	out := new(GetSubmissionsInAssignmentResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetSubmissionsInAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) SubscribeSubmission(ctx context.Context, in *SubscribeSubmissionRequest, opts ...grpc.CallOption) (AutograderService_SubscribeSubmissionClient, error) {
	stream, err := c.cc.NewStream(ctx, &AutograderService_ServiceDesc.Streams[0], "/AutograderService/SubscribeSubmission", opts...)
	if err != nil {
		return nil, err
	}
	x := &autograderServiceSubscribeSubmissionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutograderService_SubscribeSubmissionClient interface {
	Recv() (*SubscribeSubmissionResponse, error)
	grpc.ClientStream
}

type autograderServiceSubscribeSubmissionClient struct {
	grpc.ClientStream
}

func (x *autograderServiceSubscribeSubmissionClient) Recv() (*SubscribeSubmissionResponse, error) {
	m := new(SubscribeSubmissionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *autograderServiceClient) CreateManifest(ctx context.Context, in *CreateManifestRequest, opts ...grpc.CallOption) (*CreateManifestResponse, error) {
	out := new(CreateManifestResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/CreateManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateSubmission(ctx context.Context, in *CreateSubmissionRequest, opts ...grpc.CallOption) (*CreateSubmissionResponse, error) {
	out := new(CreateSubmissionResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/CreateSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) InitUpload(ctx context.Context, in *InitUploadRequest, opts ...grpc.CallOption) (*InitUploadResponse, error) {
	out := new(InitUploadResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/InitUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetSubmissionReport(ctx context.Context, in *GetSubmissionReportRequest, opts ...grpc.CallOption) (*GetSubmissionReportResponse, error) {
	out := new(GetSubmissionReportResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetSubmissionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetAssignment(ctx context.Context, in *GetAssignmentRequest, opts ...grpc.CallOption) (*GetAssignmentResponse, error) {
	out := new(GetAssignmentResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error) {
	out := new(GetCourseResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetFilesInSubmission(ctx context.Context, in *GetFilesInSubmissionRequest, opts ...grpc.CallOption) (*GetFilesInSubmissionResponse, error) {
	out := new(GetFilesInSubmissionResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetFilesInSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) HasLeaderboard(ctx context.Context, in *HasLeaderboardRequest, opts ...grpc.CallOption) (*HasLeaderboardResponse, error) {
	out := new(HasLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/HasLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateAssignment(ctx context.Context, in *CreateAssignmentRequest, opts ...grpc.CallOption) (*CreateAssignmentResponse, error) {
	out := new(CreateAssignmentResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/CreateAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) DeleteFileInManifest(ctx context.Context, in *DeleteFileInManifestRequest, opts ...grpc.CallOption) (*DeleteFileInManifestResponse, error) {
	out := new(DeleteFileInManifestResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/DeleteFileInManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) InitDownload(ctx context.Context, in *InitDownloadRequest, opts ...grpc.CallOption) (*InitDownloadResponse, error) {
	out := new(InitDownloadResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/InitDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCourseMembers(ctx context.Context, in *GetCourseMembersRequest, opts ...grpc.CallOption) (*GetCourseMembersResponse, error) {
	out := new(GetCourseMembersResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetCourseMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) AddCourseMembers(ctx context.Context, in *AddCourseMembersRequest, opts ...grpc.CallOption) (*AddCourseMembersResponse, error) {
	out := new(AddCourseMembersResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/AddCourseMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) RemoveCourseMembers(ctx context.Context, in *RemoveCourseMembersRequest, opts ...grpc.CallOption) (*RemoveCourseMembersResponse, error) {
	out := new(RemoveCourseMembersResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/RemoveCourseMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateCourseMember(ctx context.Context, in *UpdateCourseMemberRequest, opts ...grpc.CallOption) (*UpdateCourseMemberResponse, error) {
	out := new(UpdateCourseMemberResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateCourseMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error) {
	out := new(UpdateCourseResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateAssignment(ctx context.Context, in *UpdateAssignmentRequest, opts ...grpc.CallOption) (*UpdateAssignmentResponse, error) {
	out := new(UpdateAssignmentResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*RequestPasswordResetResponse, error) {
	out := new(RequestPasswordResetResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/RequestPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) RequestSignUpToken(ctx context.Context, in *RequestSignUpTokenRequest, opts ...grpc.CallOption) (*RequestSignUpTokenResponse, error) {
	out := new(RequestSignUpTokenResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/RequestSignUpToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutograderServiceServer is the server API for AutograderService service.
// All implementations must embed UnimplementedAutograderServiceServer
// for forward compatibility
type AutograderServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	GetCourseList(context.Context, *GetCourseListRequest) (*GetCourseListResponse, error)
	GetAssignmentsInCourse(context.Context, *GetAssignmentsInCourseRequest) (*GetAssignmentsInCourseResponse, error)
	GetSubmissionsInAssignment(context.Context, *GetSubmissionsInAssignmentRequest) (*GetSubmissionsInAssignmentResponse, error)
	SubscribeSubmission(*SubscribeSubmissionRequest, AutograderService_SubscribeSubmissionServer) error
	CreateManifest(context.Context, *CreateManifestRequest) (*CreateManifestResponse, error)
	CreateSubmission(context.Context, *CreateSubmissionRequest) (*CreateSubmissionResponse, error)
	InitUpload(context.Context, *InitUploadRequest) (*InitUploadResponse, error)
	GetSubmissionReport(context.Context, *GetSubmissionReportRequest) (*GetSubmissionReportResponse, error)
	GetAssignment(context.Context, *GetAssignmentRequest) (*GetAssignmentResponse, error)
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error)
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	GetFilesInSubmission(context.Context, *GetFilesInSubmissionRequest) (*GetFilesInSubmissionResponse, error)
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	HasLeaderboard(context.Context, *HasLeaderboardRequest) (*HasLeaderboardResponse, error)
	CreateAssignment(context.Context, *CreateAssignmentRequest) (*CreateAssignmentResponse, error)
	DeleteFileInManifest(context.Context, *DeleteFileInManifestRequest) (*DeleteFileInManifestResponse, error)
	InitDownload(context.Context, *InitDownloadRequest) (*InitDownloadResponse, error)
	GetCourseMembers(context.Context, *GetCourseMembersRequest) (*GetCourseMembersResponse, error)
	AddCourseMembers(context.Context, *AddCourseMembersRequest) (*AddCourseMembersResponse, error)
	RemoveCourseMembers(context.Context, *RemoveCourseMembersRequest) (*RemoveCourseMembersResponse, error)
	UpdateCourseMember(context.Context, *UpdateCourseMemberRequest) (*UpdateCourseMemberResponse, error)
	UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error)
	UpdateAssignment(context.Context, *UpdateAssignmentRequest) (*UpdateAssignmentResponse, error)
	RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*RequestPasswordResetResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	RequestSignUpToken(context.Context, *RequestSignUpTokenRequest) (*RequestSignUpTokenResponse, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	mustEmbedUnimplementedAutograderServiceServer()
}

// UnimplementedAutograderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAutograderServiceServer struct {
}

func (UnimplementedAutograderServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAutograderServiceServer) GetCourseList(context.Context, *GetCourseListRequest) (*GetCourseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseList not implemented")
}
func (UnimplementedAutograderServiceServer) GetAssignmentsInCourse(context.Context, *GetAssignmentsInCourseRequest) (*GetAssignmentsInCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignmentsInCourse not implemented")
}
func (UnimplementedAutograderServiceServer) GetSubmissionsInAssignment(context.Context, *GetSubmissionsInAssignmentRequest) (*GetSubmissionsInAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionsInAssignment not implemented")
}
func (UnimplementedAutograderServiceServer) SubscribeSubmission(*SubscribeSubmissionRequest, AutograderService_SubscribeSubmissionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSubmission not implemented")
}
func (UnimplementedAutograderServiceServer) CreateManifest(context.Context, *CreateManifestRequest) (*CreateManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManifest not implemented")
}
func (UnimplementedAutograderServiceServer) CreateSubmission(context.Context, *CreateSubmissionRequest) (*CreateSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubmission not implemented")
}
func (UnimplementedAutograderServiceServer) InitUpload(context.Context, *InitUploadRequest) (*InitUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUpload not implemented")
}
func (UnimplementedAutograderServiceServer) GetSubmissionReport(context.Context, *GetSubmissionReportRequest) (*GetSubmissionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionReport not implemented")
}
func (UnimplementedAutograderServiceServer) GetAssignment(context.Context, *GetAssignmentRequest) (*GetAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignment not implemented")
}
func (UnimplementedAutograderServiceServer) GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedAutograderServiceServer) CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedAutograderServiceServer) GetFilesInSubmission(context.Context, *GetFilesInSubmissionRequest) (*GetFilesInSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesInSubmission not implemented")
}
func (UnimplementedAutograderServiceServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedAutograderServiceServer) HasLeaderboard(context.Context, *HasLeaderboardRequest) (*HasLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasLeaderboard not implemented")
}
func (UnimplementedAutograderServiceServer) CreateAssignment(context.Context, *CreateAssignmentRequest) (*CreateAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssignment not implemented")
}
func (UnimplementedAutograderServiceServer) DeleteFileInManifest(context.Context, *DeleteFileInManifestRequest) (*DeleteFileInManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileInManifest not implemented")
}
func (UnimplementedAutograderServiceServer) InitDownload(context.Context, *InitDownloadRequest) (*InitDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDownload not implemented")
}
func (UnimplementedAutograderServiceServer) GetCourseMembers(context.Context, *GetCourseMembersRequest) (*GetCourseMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseMembers not implemented")
}
func (UnimplementedAutograderServiceServer) AddCourseMembers(context.Context, *AddCourseMembersRequest) (*AddCourseMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourseMembers not implemented")
}
func (UnimplementedAutograderServiceServer) RemoveCourseMembers(context.Context, *RemoveCourseMembersRequest) (*RemoveCourseMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCourseMembers not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateCourseMember(context.Context, *UpdateCourseMemberRequest) (*UpdateCourseMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseMember not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateAssignment(context.Context, *UpdateAssignmentRequest) (*UpdateAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignment not implemented")
}
func (UnimplementedAutograderServiceServer) RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*RequestPasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordReset not implemented")
}
func (UnimplementedAutograderServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAutograderServiceServer) RequestSignUpToken(context.Context, *RequestSignUpTokenRequest) (*RequestSignUpTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSignUpToken not implemented")
}
func (UnimplementedAutograderServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAutograderServiceServer) mustEmbedUnimplementedAutograderServiceServer() {}

// UnsafeAutograderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutograderServiceServer will
// result in compilation errors.
type UnsafeAutograderServiceServer interface {
	mustEmbedUnimplementedAutograderServiceServer()
}

func RegisterAutograderServiceServer(s grpc.ServiceRegistrar, srv AutograderServiceServer) {
	s.RegisterService(&AutograderService_ServiceDesc, srv)
}

func _AutograderService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCourseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCourseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetCourseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCourseList(ctx, req.(*GetCourseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetAssignmentsInCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentsInCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetAssignmentsInCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetAssignmentsInCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetAssignmentsInCourse(ctx, req.(*GetAssignmentsInCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetSubmissionsInAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionsInAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetSubmissionsInAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetSubmissionsInAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetSubmissionsInAssignment(ctx, req.(*GetSubmissionsInAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_SubscribeSubmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSubmissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutograderServiceServer).SubscribeSubmission(m, &autograderServiceSubscribeSubmissionServer{stream})
}

type AutograderService_SubscribeSubmissionServer interface {
	Send(*SubscribeSubmissionResponse) error
	grpc.ServerStream
}

type autograderServiceSubscribeSubmissionServer struct {
	grpc.ServerStream
}

func (x *autograderServiceSubscribeSubmissionServer) Send(m *SubscribeSubmissionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AutograderService_CreateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/CreateManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateManifest(ctx, req.(*CreateManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/CreateSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateSubmission(ctx, req.(*CreateSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_InitUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).InitUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/InitUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).InitUpload(ctx, req.(*InitUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetSubmissionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetSubmissionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetSubmissionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetSubmissionReport(ctx, req.(*GetSubmissionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetAssignment(ctx, req.(*GetAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetFilesInSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesInSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetFilesInSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetFilesInSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetFilesInSubmission(ctx, req.(*GetFilesInSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_HasLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).HasLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/HasLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).HasLeaderboard(ctx, req.(*HasLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/CreateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateAssignment(ctx, req.(*CreateAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_DeleteFileInManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileInManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).DeleteFileInManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/DeleteFileInManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).DeleteFileInManifest(ctx, req.(*DeleteFileInManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_InitDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).InitDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/InitDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).InitDownload(ctx, req.(*InitDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCourseMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCourseMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetCourseMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCourseMembers(ctx, req.(*GetCourseMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_AddCourseMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).AddCourseMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/AddCourseMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).AddCourseMembers(ctx, req.(*AddCourseMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_RemoveCourseMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCourseMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).RemoveCourseMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/RemoveCourseMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).RemoveCourseMembers(ctx, req.(*RemoveCourseMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateCourseMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateCourseMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateCourseMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateCourseMember(ctx, req.(*UpdateCourseMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateCourse(ctx, req.(*UpdateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateAssignment(ctx, req.(*UpdateAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/RequestPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).RequestPasswordReset(ctx, req.(*RequestPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_RequestSignUpToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignUpTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).RequestSignUpToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/RequestSignUpToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).RequestSignUpToken(ctx, req.(*RequestSignUpTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutograderService_ServiceDesc is the grpc.ServiceDesc for AutograderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutograderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AutograderService",
	HandlerType: (*AutograderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AutograderService_Login_Handler,
		},
		{
			MethodName: "GetCourseList",
			Handler:    _AutograderService_GetCourseList_Handler,
		},
		{
			MethodName: "GetAssignmentsInCourse",
			Handler:    _AutograderService_GetAssignmentsInCourse_Handler,
		},
		{
			MethodName: "GetSubmissionsInAssignment",
			Handler:    _AutograderService_GetSubmissionsInAssignment_Handler,
		},
		{
			MethodName: "CreateManifest",
			Handler:    _AutograderService_CreateManifest_Handler,
		},
		{
			MethodName: "CreateSubmission",
			Handler:    _AutograderService_CreateSubmission_Handler,
		},
		{
			MethodName: "InitUpload",
			Handler:    _AutograderService_InitUpload_Handler,
		},
		{
			MethodName: "GetSubmissionReport",
			Handler:    _AutograderService_GetSubmissionReport_Handler,
		},
		{
			MethodName: "GetAssignment",
			Handler:    _AutograderService_GetAssignment_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _AutograderService_GetCourse_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _AutograderService_CreateCourse_Handler,
		},
		{
			MethodName: "GetFilesInSubmission",
			Handler:    _AutograderService_GetFilesInSubmission_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _AutograderService_GetLeaderboard_Handler,
		},
		{
			MethodName: "HasLeaderboard",
			Handler:    _AutograderService_HasLeaderboard_Handler,
		},
		{
			MethodName: "CreateAssignment",
			Handler:    _AutograderService_CreateAssignment_Handler,
		},
		{
			MethodName: "DeleteFileInManifest",
			Handler:    _AutograderService_DeleteFileInManifest_Handler,
		},
		{
			MethodName: "InitDownload",
			Handler:    _AutograderService_InitDownload_Handler,
		},
		{
			MethodName: "GetCourseMembers",
			Handler:    _AutograderService_GetCourseMembers_Handler,
		},
		{
			MethodName: "AddCourseMembers",
			Handler:    _AutograderService_AddCourseMembers_Handler,
		},
		{
			MethodName: "RemoveCourseMembers",
			Handler:    _AutograderService_RemoveCourseMembers_Handler,
		},
		{
			MethodName: "UpdateCourseMember",
			Handler:    _AutograderService_UpdateCourseMember_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _AutograderService_UpdateCourse_Handler,
		},
		{
			MethodName: "UpdateAssignment",
			Handler:    _AutograderService_UpdateAssignment_Handler,
		},
		{
			MethodName: "RequestPasswordReset",
			Handler:    _AutograderService_RequestPasswordReset_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AutograderService_ResetPassword_Handler,
		},
		{
			MethodName: "RequestSignUpToken",
			Handler:    _AutograderService_RequestSignUpToken_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _AutograderService_SignUp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSubmission",
			Handler:       _AutograderService_SubscribeSubmission_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
